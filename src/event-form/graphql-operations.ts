import { gql } from '@apollo/client';

export const ADD_LOCATION = gql`
    mutation AddLocation($location: LocationInput!) {
        addLocation(location: $location) {
            id
        }
    }
`;

export const ALL_LOCATIONS_QUERY = gql`
{
  Location {
    id
    codename
    description
    latitude
    longitude
  }
}
`;

export const ALL_PLANESORTIES_QUERY = gql`
    query {
        PlaneSortie {
            name
        }
    }
`;

// This query relies on the graphql server-side using certain features of
// neo4j-graphql-js -- see:
// https://grandstack.io/docs/graphql-relationship-types
// Having a property named 'Event' is ugly but required for use of the
// autogenerated stuff.
export const EVENT_SEQUENCE_QUERY = gql`
{
  EventSequence {
    name
    uuid
    events(orderBy: [position_asc]) {
      position
      Event {
        uuid 
        description
        offset
        position {
          location {
            id
            codename
            description
            latitude
            longitude
          }
          distance
          cardinal
          height
        }
      }
    }
    planeSortie {
      name
      sortie {
        nightOf
      }
    }
  }
}
`;

export const SET_EVENT_DESCRIPTION = gql`
    mutation SetEventDescription($uuid: ID!, $description: String!) {
        updateEvent(uuid: $uuid, description: $description) {
            uuid
            description
        }
    }
`;

export const REDIRECT_EVENT_SEQUENCE = gql`
    mutation RedirectEventSequence($esId: ID!, $psName: String!) {
	redirectEventSequence(esId: $esId, psName: $psName) {
            name
        }
    }
`;

export const MOVE_EVENT = gql`
    mutation MoveEvent($esId: ID!, $sourceEvent: ID!, $targetEvent: ID!) {
        moveEvent(esId: $esId, sourceEvent: $sourceEvent, targetEvent: $targetEvent) {
          uuid
        }
    } 
`;

export const DELETE_EVENT = gql`
    mutation DeleteEvent($esId: ID!, $eventId: ID!) {
        deleteEvent(esId: $esId, eventId: $eventId)
    }
`;

export const ADD_EVENT = gql`
    mutation AddEvent($esId: ID!, $event: EventInput!) {
        addEventPrime(esId: $esId, event: $event) {
            uuid
        }
    }
`;

export const ADD_SEQUENCE = gql`
    mutation AddSequence($name: String!) {
        addSequence(name: $name) {
            uuid
        }
    }
`;
